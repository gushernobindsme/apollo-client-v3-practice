type Query {
    sharks(first: Int!, after: String): SharkConnection
    shark(id: Int!): Shark
}

type Mutation {
    createShark(input: CreateSharkInput): Shark
    updateShark(input: UpdateSharkInput): Shark
}

type Shark {
    id: Int
    originalTitle: String
    japaneseTitle: String
    rate: Int
}

type SharkConnection {
    edges: [SharkEdge]
    pageInfo: PageInfo
}

type SharkEdge {
    node: Shark
    cursor: String
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}

input CreateSharkInput {
    originalTitle: String
    japaneseTitle: String
}

input UpdateSharkInput {
    id: Int
    rate: Int
}
